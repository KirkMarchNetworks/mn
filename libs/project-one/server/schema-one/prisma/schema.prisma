// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../../../../../node_modules/@prisma/project-one/one"
  previewFeatures = ["postgresqlExtensions", "typedSql"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Tenant {
  id                           String                        @id @default(cuid())
  name                         String                        @unique
  email                        String
  licenses                     License[]
  users                        User[]
  roles                        Role[]
  devices                      Device[]
  searchQueries                SearchQuery[]
  intelligentRetrievalSettings IntelligentRetrievalSettings?
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  deletedAt                    DateTime?
  intelligentRetrievalEvents   IntelligentRetrievalEvents[]
}

model LicensedProduct {
  id        String    @id @default(cuid())
  name      String    @unique
  licenses  License[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model License {
  id              String          @id @default(cuid())
  issuedAt        DateTime        @default(now())
  expiresAt       DateTime?
  metadata        Json?
  name            String
  licensedProduct LicensedProduct @relation(fields: [name], references: [name])
  tenantId        String
  tenant          Tenant          @relation(fields: [tenantId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model User {
  id            String         @id @default(cuid())
  publicId      String         @unique
  email         String
  username      String
  password      String?
  enabled       Boolean        @default(true)
  verifiedEmail Boolean        @default(false)
  confirmEmail  ConfirmEmail?
  updateEmail   UpdateEmail?
  passwordReset PasswordReset?
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  roleId        String
  role          Role           @relation(fields: [roleId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}

model ConfirmEmail {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model UpdateEmail {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Permission {
  name      String             @unique
  roles     PermissionToRole[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum RoleType {
  AdminRole
  SomeRole
  LimitedRole
  DefaultRole
}

model Role {
  id          String             @id @default(cuid())
  name        String
  description String             @default("")
  type        RoleType           @default(DefaultRole)
  permissions PermissionToRole[]
  users       User[]
  tenantId    String
  tenant      Tenant             @relation(fields: [tenantId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
}

model PermissionToRole {
  permissionName String
  permission     Permission @relation(fields: [permissionName], references: [name])
  roleId         String
  role           Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([permissionName, roleId])
}

model Device {
  id        String    @id @default(cuid())
  name      String
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Channel {
  id            String         @id @default(cuid())
  name          String
  deviceId      String
  device        Device         @relation(fields: [deviceId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  channelImages ChannelImage[]
}

model ChannelImage {
  id              String                 @id @default(cuid())
  fileName        String                 @unique
  originalName    String
  timestamp       DateTime               @default(now())
  vector          Unsupported("vector")?
  channelId       String
  channel         Channel                @relation(fields: [channelId], references: [id])
  generativeModel GenerativeModelEnum?
  createdAt       DateTime               @default(now())
}

model SearchQuery {
  id             String                 @id @default(cuid())
  lowerCaseQuery String?
  originalQuery  String?
  fileName       String?
  vector         Unsupported("vector")?
  tenantId       String
  tenant         Tenant                 @relation(fields: [tenantId], references: [id])

  events    IntelligentRetrievalEvents[]
  createdAt DateTime                     @default(now())
}

model IntelligentRetrievalEvents {
  id              String      @id @default(cuid())
  tenantId        String      @unique
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  searchQueryId   String
  searchQuery     SearchQuery @relation(fields: [searchQueryId], references: [id])
  name            String
  similarityScore Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model IntelligentRetrievalSettings {
  id              String              @id @default(cuid())
  tenantId        String              @unique
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  generativeModel GenerativeModelEnum @default(AmazonTitanEmbedImageV1)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

enum GenerativeModelEnum {
  AmazonTitanEmbedImageV1
  GeminiOnePointFivePro
}
